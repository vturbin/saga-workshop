version: '3.8'

services:
  mongo:
    image: mongo:7.0.2
    command:
      [
        '--replSet',
        'rs0',
        '--bind_ip_all',
        '--port',
        '27017',
        '--keyFile',
        '/etc/mongodb/pki/keyfile',
      ]
    ports:
      - '27017:27017'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh -u ${MONGO_USERNAME} -p ${MONGO_PASSWORD} --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_PORT: 27017
    volumes:
      - mongodb-data:/data/db
      - mongo1_config:/data/configdb
      - ${PWD}/rs_keyfile:/etc/mongodb/pki/keyfile
    restart: always
  rabbitmq:
    image: 'rabbitmq:management'
    ports:
      - '15672:15672' # Management UI
      - '5672:5672' # RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
  loyalty:
    build:
      context: ${WORKSPACE_ROOT}
      dockerfile: ./apps/loyalty/Dockerfile
    ports:
      - '3001:3000'
      - '9221:9229'
    environment:
      MONGO_CONNECTION_STRING_DOCKER: ${MONGO_CONNECTION_STRING_DOCKER}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    # restart: always
    volumes:
      - ${WORKSPACE_ROOT}/apps/loyalty:/app/apps/loyalty
      - ${WORKSPACE_ROOT}/libs:/app/libs
    depends_on:
      - mongo
      - rabbitmq
  order:
    build:
      context: ${WORKSPACE_ROOT}
      dockerfile: ./apps/order/Dockerfile
    ports:
      - '3002:3000'
      - '9222:9229'
    environment:
      MONGO_CONNECTION_STRING_DOCKER: ${MONGO_CONNECTION_STRING_DOCKER}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    # restart: always
    volumes:
      - ${WORKSPACE_ROOT}/apps/order:/app/apps/order
      - ${WORKSPACE_ROOT}/libs:/app/libs
    depends_on:
      - mongo
      - rabbitmq
  warehouse:
    build:
      context: ${WORKSPACE_ROOT}
      dockerfile: ./apps/warehouse/Dockerfile
    ports:
      - '3003:3000'
      - '9223:9229'
    environment:
      MONGO_CONNECTION_STRING_DOCKER: ${MONGO_CONNECTION_STRING_DOCKER}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    # restart: always
    volumes:
      - ${WORKSPACE_ROOT}/apps/warehouse:/app/apps/warehouse
      - ${WORKSPACE_ROOT}/libs:/app/libs
    depends_on:
      - mongo
      - rabbitmq
  payment:
    build:
      context: ${WORKSPACE_ROOT}
      dockerfile: ./apps/payment/Dockerfile
    ports:
      - '3004:3000'
      - '9224:9229'
    environment:
      MONGO_CONNECTION_STRING_DOCKER: ${MONGO_CONNECTION_STRING_DOCKER}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
    # restart: always
    volumes:
      - ${WORKSPACE_ROOT}/apps/payment:/app/apps/payment
      - ${WORKSPACE_ROOT}/libs:/app/libs
    depends_on:
      - mongo
      - rabbitmq
volumes:
  mongodb-data:
  mongo1_config:
